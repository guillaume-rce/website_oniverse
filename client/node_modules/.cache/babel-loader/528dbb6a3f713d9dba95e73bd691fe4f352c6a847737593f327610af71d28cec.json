{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport Constants from '../constants';\nimport { getBlocks, isRotation } from './Piece';\nvar GAME_HEIGHT = Constants.GAME_HEIGHT,\n  GAME_WIDTH = Constants.GAME_WIDTH;\nvar serializeCoords = function (_a) {\n  var x = _a.x,\n    y = _a.y;\n  return \"\".concat(x, \",\").concat(y);\n};\nexport function buildMatrix() {\n  var matrix = new Array(GAME_HEIGHT);\n  for (var y = 0; y < matrix.length; y++) {\n    matrix[y] = buildGameRow();\n  }\n  return matrix;\n}\nfunction buildGameRow() {\n  return new Array(GAME_WIDTH).fill(null);\n}\nexport var addPieceToBoard = function (matrix, positionedPiece, isGhost) {\n  if (isGhost === void 0) {\n    isGhost = false;\n  }\n  var piece = positionedPiece.piece,\n    rotation = positionedPiece.rotation,\n    position = positionedPiece.position;\n  var block = getBlocks(piece)[rotation];\n  if (!block) {\n    throw new Error(\"Unexpected: no rotation \".concat(rotation, \" found to piece \").concat(piece));\n  }\n  var filledCells = block.reduce(function (output, row, y) {\n    return output.concat(row.map(function (cell, x) {\n      return cell ? {\n        x: x + position.x,\n        y: y + position.y\n      } : false;\n    }));\n  }, []);\n  var filled = new Set(filledCells.map(function (value) {\n    return value ? serializeCoords(value) : '';\n  }).filter(Boolean));\n  var value = isGhost ? 'ghost' : piece;\n  return matrix.map(function (row, y) {\n    return row.map(function (cell, x) {\n      return filled.has(serializeCoords({\n        x: x,\n        y: y\n      })) ? value : cell;\n    });\n  });\n};\nexport function setPiece(matrix, positionedPiece) {\n  var _matrix = addPieceToBoard(matrix, positionedPiece);\n  // TODO: purify\n  var linesCleared = clearFullLines(_matrix);\n  return [_matrix, linesCleared];\n}\nfunction clearFullLines(matrix) {\n  var linesCleared = 0;\n  for (var y = 0; y < matrix.length; y++) {\n    // it's a full line\n    if (every(matrix[y])) {\n      // so rip it out\n      matrix.splice(y, 1);\n      matrix.unshift(buildGameRow());\n      linesCleared += 1;\n    }\n  }\n  return linesCleared;\n}\nfunction every(list) {\n  for (var i = 0; i < list.length; i++) {\n    if (!list[i]) return false;\n  }\n  return true;\n}\nexport function isEmptyPosition(matrix, positionedPiece) {\n  var piece = positionedPiece.piece,\n    rotation = positionedPiece.rotation,\n    position = positionedPiece.position;\n  var blocks = getBlocks(piece)[rotation];\n  for (var x = 0; x < Constants.BLOCK_WIDTH; x++) {\n    for (var y = 0; y < Constants.BLOCK_HEIGHT; y++) {\n      var block = blocks[y][x];\n      var matrixX = x + position.x;\n      var matrixY = y + position.y;\n      // might not be filled, ya know\n      if (block) {\n        // make sure it's on the matrix\n        if (matrixX >= 0 && matrixX < GAME_WIDTH && matrixY < GAME_HEIGHT) {\n          // make sure it's available\n          if (!matrix[matrixY] || matrix[matrixY][matrixX]) {\n            // that square is taken by the matrix already\n            return false;\n          }\n        } else {\n          // there's a square in the block that's off the matrix\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\nfunction assert(value) {\n  if (!value) throw new Error('assertion failed');\n}\nfunction tryMove(move) {\n  return function (gameboard, positionedPiece) {\n    var updatedPiece = move(positionedPiece);\n    if (isEmptyPosition(gameboard, updatedPiece)) {\n      return updatedPiece;\n    }\n    return undefined;\n  };\n}\nexport var moveLeft = tryMove(function (positionedPiece) {\n  var newPosition = __assign(__assign({}, positionedPiece.position), {\n    x: positionedPiece.position.x - 1\n  });\n  return __assign(__assign({}, positionedPiece), {\n    position: newPosition\n  });\n});\nexport var moveRight = tryMove(function (positionedPiece) {\n  var newPosition = __assign(__assign({}, positionedPiece.position), {\n    x: positionedPiece.position.x + 1\n  });\n  return __assign(__assign({}, positionedPiece), {\n    position: newPosition\n  });\n});\nexport var moveDown = tryMove(function (positionedPiece) {\n  var newPosition = __assign(__assign({}, positionedPiece.position), {\n    y: positionedPiece.position.y + 1\n  });\n  return __assign(__assign({}, positionedPiece), {\n    position: newPosition\n  });\n});\nexport var flipClockwise = tryMove(function (positionedPiece) {\n  var _a;\n  var rotation = (((_a = positionedPiece.rotation) !== null && _a !== void 0 ? _a : 0) + 1) % Constants.ROTATION_COUNT;\n  assert(isRotation(rotation));\n  return __assign(__assign({}, positionedPiece), {\n    rotation: rotation\n  });\n});\nexport var flipCounterclockwise = tryMove(function (positionedPiece) {\n  var _a;\n  var rotation = ((_a = positionedPiece.rotation) !== null && _a !== void 0 ? _a : 0) - 1;\n  if (rotation < 0) rotation += Constants.ROTATION_COUNT;\n  assert(isRotation(rotation));\n  return __assign(__assign({}, positionedPiece), {\n    rotation: rotation\n  });\n});\nexport function hardDrop(gameboard, positionedPiece) {\n  var position = __assign({}, positionedPiece.position);\n  while (isEmptyPosition(gameboard, __assign(__assign({}, positionedPiece), {\n    position: position\n  }))) {\n    position.y += 1;\n  }\n  // at this point, we just found a non-empty position, so let's step back\n  position.y -= 1;\n  return __assign(__assign({}, positionedPiece), {\n    position: position\n  });\n}","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","Constants","getBlocks","isRotation","GAME_HEIGHT","GAME_WIDTH","serializeCoords","_a","x","y","concat","buildMatrix","matrix","Array","buildGameRow","fill","addPieceToBoard","positionedPiece","isGhost","piece","rotation","position","block","Error","filledCells","reduce","output","row","map","cell","filled","Set","value","filter","Boolean","has","setPiece","_matrix","linesCleared","clearFullLines","every","splice","unshift","list","isEmptyPosition","blocks","BLOCK_WIDTH","BLOCK_HEIGHT","matrixX","matrixY","assert","tryMove","move","gameboard","updatedPiece","undefined","moveLeft","newPosition","moveRight","moveDown","flipClockwise","ROTATION_COUNT","flipCounterclockwise","hardDrop"],"sources":["C:/Users/groch/Documents/projets/futur/site_web/site-web-oniverse/node_modules/react-tetris/lib/models/Matrix.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport Constants from '../constants';\nimport { getBlocks, isRotation } from './Piece';\nvar GAME_HEIGHT = Constants.GAME_HEIGHT, GAME_WIDTH = Constants.GAME_WIDTH;\nvar serializeCoords = function (_a) {\n    var x = _a.x, y = _a.y;\n    return \"\".concat(x, \",\").concat(y);\n};\nexport function buildMatrix() {\n    var matrix = new Array(GAME_HEIGHT);\n    for (var y = 0; y < matrix.length; y++) {\n        matrix[y] = buildGameRow();\n    }\n    return matrix;\n}\nfunction buildGameRow() {\n    return new Array(GAME_WIDTH).fill(null);\n}\nexport var addPieceToBoard = function (matrix, positionedPiece, isGhost) {\n    if (isGhost === void 0) { isGhost = false; }\n    var piece = positionedPiece.piece, rotation = positionedPiece.rotation, position = positionedPiece.position;\n    var block = getBlocks(piece)[rotation];\n    if (!block) {\n        throw new Error(\"Unexpected: no rotation \".concat(rotation, \" found to piece \").concat(piece));\n    }\n    var filledCells = block.reduce(function (output, row, y) {\n        return output.concat(row.map(function (cell, x) {\n            return cell ? { x: x + position.x, y: y + position.y } : false;\n        }));\n    }, []);\n    var filled = new Set(filledCells\n        .map(function (value) { return (value ? serializeCoords(value) : ''); })\n        .filter(Boolean));\n    var value = isGhost ? 'ghost' : piece;\n    return matrix.map(function (row, y) {\n        return row.map(function (cell, x) {\n            return filled.has(serializeCoords({ x: x, y: y })) ? value : cell;\n        });\n    });\n};\nexport function setPiece(matrix, positionedPiece) {\n    var _matrix = addPieceToBoard(matrix, positionedPiece);\n    // TODO: purify\n    var linesCleared = clearFullLines(_matrix);\n    return [_matrix, linesCleared];\n}\nfunction clearFullLines(matrix) {\n    var linesCleared = 0;\n    for (var y = 0; y < matrix.length; y++) {\n        // it's a full line\n        if (every(matrix[y])) {\n            // so rip it out\n            matrix.splice(y, 1);\n            matrix.unshift(buildGameRow());\n            linesCleared += 1;\n        }\n    }\n    return linesCleared;\n}\nfunction every(list) {\n    for (var i = 0; i < list.length; i++) {\n        if (!list[i])\n            return false;\n    }\n    return true;\n}\nexport function isEmptyPosition(matrix, positionedPiece) {\n    var piece = positionedPiece.piece, rotation = positionedPiece.rotation, position = positionedPiece.position;\n    var blocks = getBlocks(piece)[rotation];\n    for (var x = 0; x < Constants.BLOCK_WIDTH; x++) {\n        for (var y = 0; y < Constants.BLOCK_HEIGHT; y++) {\n            var block = blocks[y][x];\n            var matrixX = x + position.x;\n            var matrixY = y + position.y;\n            // might not be filled, ya know\n            if (block) {\n                // make sure it's on the matrix\n                if (matrixX >= 0 && matrixX < GAME_WIDTH && matrixY < GAME_HEIGHT) {\n                    // make sure it's available\n                    if (!matrix[matrixY] || matrix[matrixY][matrixX]) {\n                        // that square is taken by the matrix already\n                        return false;\n                    }\n                }\n                else {\n                    // there's a square in the block that's off the matrix\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nfunction assert(value) {\n    if (!value)\n        throw new Error('assertion failed');\n}\nfunction tryMove(move) {\n    return function (gameboard, positionedPiece) {\n        var updatedPiece = move(positionedPiece);\n        if (isEmptyPosition(gameboard, updatedPiece)) {\n            return updatedPiece;\n        }\n        return undefined;\n    };\n}\nexport var moveLeft = tryMove(function (positionedPiece) {\n    var newPosition = __assign(__assign({}, positionedPiece.position), { x: positionedPiece.position.x - 1 });\n    return __assign(__assign({}, positionedPiece), { position: newPosition });\n});\nexport var moveRight = tryMove(function (positionedPiece) {\n    var newPosition = __assign(__assign({}, positionedPiece.position), { x: positionedPiece.position.x + 1 });\n    return __assign(__assign({}, positionedPiece), { position: newPosition });\n});\nexport var moveDown = tryMove(function (positionedPiece) {\n    var newPosition = __assign(__assign({}, positionedPiece.position), { y: positionedPiece.position.y + 1 });\n    return __assign(__assign({}, positionedPiece), { position: newPosition });\n});\nexport var flipClockwise = tryMove(function (positionedPiece) {\n    var _a;\n    var rotation = (((_a = positionedPiece.rotation) !== null && _a !== void 0 ? _a : 0) + 1) % Constants.ROTATION_COUNT;\n    assert(isRotation(rotation));\n    return __assign(__assign({}, positionedPiece), { rotation: rotation });\n});\nexport var flipCounterclockwise = tryMove(function (positionedPiece) {\n    var _a;\n    var rotation = ((_a = positionedPiece.rotation) !== null && _a !== void 0 ? _a : 0) - 1;\n    if (rotation < 0)\n        rotation += Constants.ROTATION_COUNT;\n    assert(isRotation(rotation));\n    return __assign(__assign({}, positionedPiece), { rotation: rotation });\n});\nexport function hardDrop(gameboard, positionedPiece) {\n    var position = __assign({}, positionedPiece.position);\n    while (isEmptyPosition(gameboard, __assign(__assign({}, positionedPiece), { position: position }))) {\n        position.y += 1;\n    }\n    // at this point, we just found a non-empty position, so let's step back\n    position.y -= 1;\n    return __assign(__assign({}, positionedPiece), { position: position });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}